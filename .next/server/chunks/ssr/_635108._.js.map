{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelsalama/Documents/Michael/chrome/nearestmountain/nearest-mountain/app/page.js"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from \"react\";\n\nexport default function Home() {\n    const [latitude, setLatitude] = useState(null);\n    const [longitude, setLongitude] = useState(null);\n    const [nearestMountain, setNearestMountain] = useState(null);\n    const [elevation, setElevation] = useState(500);\n    const [showCoordinateInput, setShowCoordinateInput] = useState(false);\n    const [newLatitude, setNewLatitude] = useState(\"\");\n    const [newLongitude, setNewLongitude] = useState(\"\");\n    const [locationError, setLocationError] = useState(false);\n    const [showAbout, setShowAbout] = useState(false); // State to toggle About section\n\n    const generateRandomRange = () => {\n        fetch(`/api/randomRange?lat=${latitude}&lon=${longitude}&minElevation=${elevation}`)\n            .then((res) => res.json())\n            .then((data) => setNearestMountain(data))\n            .catch((error) => console.error(\"Error fetching data:\", error));\n    };\n\n    useEffect(() => {\n        if (\"geolocation\" in navigator) {\n            navigator.geolocation.getCurrentPosition(\n                (position) => {\n                    setLatitude(position.coords.latitude);\n                    setLongitude(position.coords.longitude);\n                    setLocationError(false);\n                },\n                () => {\n                    setLocationError(true);\n                    setShowCoordinateInput(true);\n                }\n            );\n        } else {\n            setLocationError(true);\n            setShowCoordinateInput(true);\n        }\n    }, []);\n\n    useEffect(() => {\n        if ((latitude || newLatitude) && (longitude || newLongitude)) {\n            const lat = newLatitude || latitude;\n            const lon = newLongitude || longitude;\n            fetch(`/api/nearestMountain?lat=${lat}&lon=${lon}&minElevation=${elevation}`)\n                .then((res) => res.json())\n                .then((data) => setNearestMountain(data))\n                .catch((error) => console.error(\"Error fetching data:\", error));\n        }\n    }, [latitude, longitude, elevation, newLatitude, newLongitude]);\n\n    const handleElevationChange = (event) => {\n        setElevation(event.target.value);\n    };\n\n    const handleCoordinateSubmit = (event) => {\n        event.preventDefault();\n        setLatitude(parseFloat(newLatitude));\n        setLongitude(parseFloat(newLongitude));\n        setShowCoordinateInput(false);\n    };\n\n    // Haversine function to calculate distance between two lat-lon points\n    const haversine = (lat1, lon1, lat2, lon2) => {\n        const R = 6371; // Radius of Earth in km\n        const toRad = (deg) => (deg * Math.PI) / 180;\n        const dLat = toRad(lat2 - lat1);\n        const dLon = toRad(lon2 - lon1);\n        const a =\n            Math.sin(dLat / 2) ** 2 +\n            Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) ** 2;\n        return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    };\n\n    return (\n        <div className=\"full-container\">\n            <div className=\"app-container\">\n                <h1>Find the Nearest Mountain &#127956;</h1>\n                {latitude && longitude ? (\n                    <div className=\"location\">\n                        <p className=\"your-loc\">\n                            Your Location: {latitude.toFixed(4)}, {longitude.toFixed(4)}\n                        </p>\n                        {!showCoordinateInput && (\n                            <button\n                                onClick={() => setShowCoordinateInput(true)}\n                                className=\"change-coordinates-button\"\n                            >\n                                Change Coordinates\n                            </button>\n                        )}\n                    </div>\n                ) : (\n                    <p className=\"error-code\">{locationError ? \"Location disabled\" : \"Fetching location...\"}</p>\n                )}\n\n                {showCoordinateInput && (\n                    <form onSubmit={handleCoordinateSubmit} className=\"coordinate-input-form\">\n                        <div className=\"coordinate-input-inline\">\n                            <input\n                                type=\"number\"\n                                id=\"latitude\"\n                                value={newLatitude}\n                                onChange={(e) => setNewLatitude(e.target.value)}\n                                step=\"any\"\n                                placeholder=\"Latitude\"\n                                required\n                            />\n                            <input\n                                type=\"number\"\n                                id=\"longitude\"\n                                value={newLongitude}\n                                onChange={(e) => setNewLongitude(e.target.value)}\n                                step=\"any\"\n                                placeholder=\"Longitude\"\n                                required\n                            />\n                        </div>\n                        <button type=\"submit\" className=\"submit-coordinates-button\">\n                            Go &#x1f4cd;\n                        </button>\n                    </form>\n                )}\n\n                <div className=\"elevation-control\">\n                    <label htmlFor=\"elevation\">Desired Elevation (meters): </label>\n                    <input\n                        type=\"number\"\n                        id=\"elevation\"\n                        value={elevation}\n                        onChange={handleElevationChange}\n                        min=\"0\"\n                        placeholder=\"Enter elevation in meters\"\n                        className=\"elevation-input\"\n                    />\n                </div>\n\n                {nearestMountain ? (\n                    <div className=\"mountain-info\">\n                        <p><strong>Nearest Mountain Range:<br /><span className=\"targetRange\">{nearestMountain.name}</span></strong><br />{nearestMountain.region}</p>\n                        <p>Location: {nearestMountain.latitude}, {nearestMountain.longitude}</p>\n                        <p>Distance: {haversine(latitude, longitude, nearestMountain.latitude, nearestMountain.longitude).toFixed(2)} kilometers away</p>\n                        <p><strong>Max Elevation: </strong>{nearestMountain.elevation_high}m</p>\n                        <p>\n                            <a\n                                href={`https://www.google.com/maps?q=${nearestMountain.latitude},${nearestMountain.longitude}`}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                                className=\"google-map-link\"\n                            >\n                                View on Google Maps\n                            </a>\n                        </p>\n                        <button onClick={generateRandomRange} className=\"random-peak-button\">\n                            &#9968; Random Mountain Range &#9968;\n                        </button>\n                    </div>\n                ) : (\n                    <p>Loading nearest mountain...</p>\n                )}\n            </div>\n\n            <div className=\"about\">\n                <button onClick={() => setShowAbout(true)}>\n                    about\n                </button>\n            </div>\n\n            {showAbout && (\n                <div className=\"about-overlay\">\n                    <button className=\"close-about\" onClick={() => setShowAbout(false)}>\n                        ✖ Close\n                    </button>\n                    <div className=\"about-container\">\n                        <p>\n                            Welcome to <code>nearestmountain.com</code>, a webapp for people who are allergic to sea level. It is a simple calculator that determines the closest mountain range to your current location. It uses the GMBA Mountain Inventory database, cited below, and therefore output coordinates currently link to the geographic center of the nearest range, not mountain peaks themselves.\n                        </p>\n                        <p>\n                            The random range generator outputs a random mountain range from the GMBA database based on your selected elevation criteria.\n                        </p>\n                        <p>\n                            Background: Nevado Sajama, Bolivia.\n                        </p>\n                        <p>\n                            I can be reached at <code>me@michaelsalama.com</code>\n                        </p>\n                        <p className=\"citation\">\n                            Dataset: Snethlage, M.A., Geschke, J., Spehn, E.M., Ranipeta, A., Yoccoz, N.G., Körner, Ch., Jetz, W., Fischer, M. & Urbach, D. GMBA Mountain Inventory v2. GMBA-EarthEnv. https://doi.org/10.48601/earthenv-t9k2-1407 (2022).\n                        </p>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 436, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 446, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelsalama/Documents/Michael/chrome/nearestmountain/nearest-mountain/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored[\n  'react-ssr'\n].ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,0HAAyBC,QAAQ,CACxD,YACD,CAACC,kBAAkB","ignoreList":[0]}},
    {"offset": {"line": 448, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}